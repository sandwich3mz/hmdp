// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hmdp/ent/shoptype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShopType is the model entity for the ShopType schema.
type ShopType struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 类型名称
	Name string `json:"name,omitempty"`
	// 图标
	Icon string `json:"icon,omitempty"`
	// 顺序
	Sort int `json:"sort,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"createTime,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"updateTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShopType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoptype.FieldID, shoptype.FieldSort:
			values[i] = new(sql.NullInt64)
		case shoptype.FieldName, shoptype.FieldIcon:
			values[i] = new(sql.NullString)
		case shoptype.FieldCreateTime, shoptype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShopType fields.
func (st *ShopType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoptype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int64(value.Int64)
		case shoptype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case shoptype.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				st.Icon = value.String
			}
		case shoptype.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				st.Sort = int(value.Int64)
			}
		case shoptype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				st.CreateTime = value.Time
			}
		case shoptype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				st.UpdateTime = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShopType.
// This includes values selected through modifiers, order, etc.
func (st *ShopType) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// Update returns a builder for updating this ShopType.
// Note that you need to call ShopType.Unwrap() before calling this method if this ShopType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ShopType) Update() *ShopTypeUpdateOne {
	return NewShopTypeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ShopType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ShopType) Unwrap() *ShopType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShopType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ShopType) String() string {
	var builder strings.Builder
	builder.WriteString("ShopType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(st.Icon)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", st.Sort))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(st.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(st.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShopTypes is a parsable slice of ShopType.
type ShopTypes []*ShopType
