// Code generated by ent, DO NOT EDIT.

package shop

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the shop type in the database.
	Label = "shop"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTypeID holds the string denoting the type_id field in the database.
	FieldTypeID = "type_id"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldX holds the string denoting the x field in the database.
	FieldX = "x"
	// FieldY holds the string denoting the y field in the database.
	FieldY = "y"
	// FieldAvgPrice holds the string denoting the avg_price field in the database.
	FieldAvgPrice = "avg_price"
	// FieldSold holds the string denoting the sold field in the database.
	FieldSold = "sold"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldOpenHours holds the string denoting the open_hours field in the database.
	FieldOpenHours = "open_hours"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the updatetime field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the shop in the database.
	Table = "tb_shop"
)

// Columns holds all SQL columns for shop fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTypeID,
	FieldImages,
	FieldArea,
	FieldAddress,
	FieldX,
	FieldY,
	FieldAvgPrice,
	FieldSold,
	FieldComments,
	FieldScore,
	FieldOpenHours,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the Shop queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTypeID orders the results by the type_id field.
func ByTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeID, opts...).ToFunc()
}

// ByImages orders the results by the images field.
func ByImages(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImages, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByX orders the results by the x field.
func ByX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldX, opts...).ToFunc()
}

// ByY orders the results by the y field.
func ByY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldY, opts...).ToFunc()
}

// ByAvgPrice orders the results by the avg_price field.
func ByAvgPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgPrice, opts...).ToFunc()
}

// BySold orders the results by the sold field.
func BySold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSold, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByOpenHours orders the results by the open_hours field.
func ByOpenHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenHours, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the updateTime field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
