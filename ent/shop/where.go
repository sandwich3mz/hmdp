// Code generated by ent, DO NOT EDIT.

package shop

import (
	"hmdp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldName, v))
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldTypeID, v))
}

// Images applies equality check predicate on the "images" field. It's identical to ImagesEQ.
func Images(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldImages, v))
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldArea, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldAddress, v))
}

// X applies equality check predicate on the "x" field. It's identical to XEQ.
func X(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldX, v))
}

// Y applies equality check predicate on the "y" field. It's identical to YEQ.
func Y(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldY, v))
}

// AvgPrice applies equality check predicate on the "avg_price" field. It's identical to AvgPriceEQ.
func AvgPrice(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldAvgPrice, v))
}

// Sold applies equality check predicate on the "sold" field. It's identical to SoldEQ.
func Sold(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldSold, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldComments, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldScore, v))
}

// OpenHours applies equality check predicate on the "open_hours" field. It's identical to OpenHoursEQ.
func OpenHours(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldOpenHours, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContainsFold(FieldName, v))
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldTypeID, v))
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldTypeID, v))
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldTypeID, vs...))
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldTypeID, vs...))
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldTypeID, v))
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldTypeID, v))
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldTypeID, v))
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldTypeID, v))
}

// ImagesEQ applies the EQ predicate on the "images" field.
func ImagesEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldImages, v))
}

// ImagesNEQ applies the NEQ predicate on the "images" field.
func ImagesNEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldImages, v))
}

// ImagesIn applies the In predicate on the "images" field.
func ImagesIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldImages, vs...))
}

// ImagesNotIn applies the NotIn predicate on the "images" field.
func ImagesNotIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldImages, vs...))
}

// ImagesGT applies the GT predicate on the "images" field.
func ImagesGT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldImages, v))
}

// ImagesGTE applies the GTE predicate on the "images" field.
func ImagesGTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldImages, v))
}

// ImagesLT applies the LT predicate on the "images" field.
func ImagesLT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldImages, v))
}

// ImagesLTE applies the LTE predicate on the "images" field.
func ImagesLTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldImages, v))
}

// ImagesContains applies the Contains predicate on the "images" field.
func ImagesContains(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContains(FieldImages, v))
}

// ImagesHasPrefix applies the HasPrefix predicate on the "images" field.
func ImagesHasPrefix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasPrefix(FieldImages, v))
}

// ImagesHasSuffix applies the HasSuffix predicate on the "images" field.
func ImagesHasSuffix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasSuffix(FieldImages, v))
}

// ImagesEqualFold applies the EqualFold predicate on the "images" field.
func ImagesEqualFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEqualFold(FieldImages, v))
}

// ImagesContainsFold applies the ContainsFold predicate on the "images" field.
func ImagesContainsFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContainsFold(FieldImages, v))
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldArea, v))
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldArea, v))
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldArea, vs...))
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldArea, vs...))
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldArea, v))
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldArea, v))
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldArea, v))
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldArea, v))
}

// AreaContains applies the Contains predicate on the "area" field.
func AreaContains(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContains(FieldArea, v))
}

// AreaHasPrefix applies the HasPrefix predicate on the "area" field.
func AreaHasPrefix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasPrefix(FieldArea, v))
}

// AreaHasSuffix applies the HasSuffix predicate on the "area" field.
func AreaHasSuffix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasSuffix(FieldArea, v))
}

// AreaEqualFold applies the EqualFold predicate on the "area" field.
func AreaEqualFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEqualFold(FieldArea, v))
}

// AreaContainsFold applies the ContainsFold predicate on the "area" field.
func AreaContainsFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContainsFold(FieldArea, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContainsFold(FieldAddress, v))
}

// XEQ applies the EQ predicate on the "x" field.
func XEQ(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldX, v))
}

// XNEQ applies the NEQ predicate on the "x" field.
func XNEQ(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldX, v))
}

// XIn applies the In predicate on the "x" field.
func XIn(vs ...float64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldX, vs...))
}

// XNotIn applies the NotIn predicate on the "x" field.
func XNotIn(vs ...float64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldX, vs...))
}

// XGT applies the GT predicate on the "x" field.
func XGT(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldX, v))
}

// XGTE applies the GTE predicate on the "x" field.
func XGTE(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldX, v))
}

// XLT applies the LT predicate on the "x" field.
func XLT(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldX, v))
}

// XLTE applies the LTE predicate on the "x" field.
func XLTE(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldX, v))
}

// YEQ applies the EQ predicate on the "y" field.
func YEQ(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldY, v))
}

// YNEQ applies the NEQ predicate on the "y" field.
func YNEQ(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldY, v))
}

// YIn applies the In predicate on the "y" field.
func YIn(vs ...float64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldY, vs...))
}

// YNotIn applies the NotIn predicate on the "y" field.
func YNotIn(vs ...float64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldY, vs...))
}

// YGT applies the GT predicate on the "y" field.
func YGT(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldY, v))
}

// YGTE applies the GTE predicate on the "y" field.
func YGTE(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldY, v))
}

// YLT applies the LT predicate on the "y" field.
func YLT(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldY, v))
}

// YLTE applies the LTE predicate on the "y" field.
func YLTE(v float64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldY, v))
}

// AvgPriceEQ applies the EQ predicate on the "avg_price" field.
func AvgPriceEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldAvgPrice, v))
}

// AvgPriceNEQ applies the NEQ predicate on the "avg_price" field.
func AvgPriceNEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldAvgPrice, v))
}

// AvgPriceIn applies the In predicate on the "avg_price" field.
func AvgPriceIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldAvgPrice, vs...))
}

// AvgPriceNotIn applies the NotIn predicate on the "avg_price" field.
func AvgPriceNotIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldAvgPrice, vs...))
}

// AvgPriceGT applies the GT predicate on the "avg_price" field.
func AvgPriceGT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldAvgPrice, v))
}

// AvgPriceGTE applies the GTE predicate on the "avg_price" field.
func AvgPriceGTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldAvgPrice, v))
}

// AvgPriceLT applies the LT predicate on the "avg_price" field.
func AvgPriceLT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldAvgPrice, v))
}

// AvgPriceLTE applies the LTE predicate on the "avg_price" field.
func AvgPriceLTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldAvgPrice, v))
}

// SoldEQ applies the EQ predicate on the "sold" field.
func SoldEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldSold, v))
}

// SoldNEQ applies the NEQ predicate on the "sold" field.
func SoldNEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldSold, v))
}

// SoldIn applies the In predicate on the "sold" field.
func SoldIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldSold, vs...))
}

// SoldNotIn applies the NotIn predicate on the "sold" field.
func SoldNotIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldSold, vs...))
}

// SoldGT applies the GT predicate on the "sold" field.
func SoldGT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldSold, v))
}

// SoldGTE applies the GTE predicate on the "sold" field.
func SoldGTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldSold, v))
}

// SoldLT applies the LT predicate on the "sold" field.
func SoldLT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldSold, v))
}

// SoldLTE applies the LTE predicate on the "sold" field.
func SoldLTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldSold, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...uint64) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v uint64) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldComments, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int8) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int8) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int8) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldScore, v))
}

// OpenHoursEQ applies the EQ predicate on the "open_hours" field.
func OpenHoursEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldOpenHours, v))
}

// OpenHoursNEQ applies the NEQ predicate on the "open_hours" field.
func OpenHoursNEQ(v string) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldOpenHours, v))
}

// OpenHoursIn applies the In predicate on the "open_hours" field.
func OpenHoursIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldOpenHours, vs...))
}

// OpenHoursNotIn applies the NotIn predicate on the "open_hours" field.
func OpenHoursNotIn(vs ...string) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldOpenHours, vs...))
}

// OpenHoursGT applies the GT predicate on the "open_hours" field.
func OpenHoursGT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldOpenHours, v))
}

// OpenHoursGTE applies the GTE predicate on the "open_hours" field.
func OpenHoursGTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldOpenHours, v))
}

// OpenHoursLT applies the LT predicate on the "open_hours" field.
func OpenHoursLT(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldOpenHours, v))
}

// OpenHoursLTE applies the LTE predicate on the "open_hours" field.
func OpenHoursLTE(v string) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldOpenHours, v))
}

// OpenHoursContains applies the Contains predicate on the "open_hours" field.
func OpenHoursContains(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContains(FieldOpenHours, v))
}

// OpenHoursHasPrefix applies the HasPrefix predicate on the "open_hours" field.
func OpenHoursHasPrefix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasPrefix(FieldOpenHours, v))
}

// OpenHoursHasSuffix applies the HasSuffix predicate on the "open_hours" field.
func OpenHoursHasSuffix(v string) predicate.Shop {
	return predicate.Shop(sql.FieldHasSuffix(FieldOpenHours, v))
}

// OpenHoursEqualFold applies the EqualFold predicate on the "open_hours" field.
func OpenHoursEqualFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldEqualFold(FieldOpenHours, v))
}

// OpenHoursContainsFold applies the ContainsFold predicate on the "open_hours" field.
func OpenHoursContainsFold(v string) predicate.Shop {
	return predicate.Shop(sql.FieldContainsFold(FieldOpenHours, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Shop {
	return predicate.Shop(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		p(s.Not())
	})
}
