// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/shop"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopCreate is the builder for creating a Shop entity.
type ShopCreate struct {
	config
	mutation *ShopMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *ShopCreate) SetName(s string) *ShopCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetTypeID sets the "type_id" field.
func (sc *ShopCreate) SetTypeID(u uint64) *ShopCreate {
	sc.mutation.SetTypeID(u)
	return sc
}

// SetImages sets the "images" field.
func (sc *ShopCreate) SetImages(s string) *ShopCreate {
	sc.mutation.SetImages(s)
	return sc
}

// SetArea sets the "area" field.
func (sc *ShopCreate) SetArea(s string) *ShopCreate {
	sc.mutation.SetArea(s)
	return sc
}

// SetAddress sets the "address" field.
func (sc *ShopCreate) SetAddress(s string) *ShopCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetX sets the "x" field.
func (sc *ShopCreate) SetX(f float64) *ShopCreate {
	sc.mutation.SetX(f)
	return sc
}

// SetY sets the "y" field.
func (sc *ShopCreate) SetY(f float64) *ShopCreate {
	sc.mutation.SetY(f)
	return sc
}

// SetAvgPrice sets the "avg_price" field.
func (sc *ShopCreate) SetAvgPrice(u uint64) *ShopCreate {
	sc.mutation.SetAvgPrice(u)
	return sc
}

// SetSold sets the "sold" field.
func (sc *ShopCreate) SetSold(u uint64) *ShopCreate {
	sc.mutation.SetSold(u)
	return sc
}

// SetComments sets the "comments" field.
func (sc *ShopCreate) SetComments(u uint64) *ShopCreate {
	sc.mutation.SetComments(u)
	return sc
}

// SetScore sets the "score" field.
func (sc *ShopCreate) SetScore(i int8) *ShopCreate {
	sc.mutation.SetScore(i)
	return sc
}

// SetOpenHours sets the "open_hours" field.
func (sc *ShopCreate) SetOpenHours(s string) *ShopCreate {
	sc.mutation.SetOpenHours(s)
	return sc
}

// SetCreateTime sets the "createTime" field.
func (sc *ShopCreate) SetCreateTime(t time.Time) *ShopCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetUpdateTime sets the "updateTime" field.
func (sc *ShopCreate) SetUpdateTime(t time.Time) *ShopCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetID sets the "id" field.
func (sc *ShopCreate) SetID(i int64) *ShopCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the ShopMutation object of the builder.
func (sc *ShopCreate) Mutation() *ShopMutation {
	return sc.mutation
}

// Save creates the Shop in the database.
func (sc *ShopCreate) Save(ctx context.Context) (*Shop, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShopCreate) SaveX(ctx context.Context) *Shop {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShopCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShopCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShopCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Shop.name"`)}
	}
	if _, ok := sc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "Shop.type_id"`)}
	}
	if _, ok := sc.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "Shop.images"`)}
	}
	if _, ok := sc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "Shop.area"`)}
	}
	if _, ok := sc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Shop.address"`)}
	}
	if _, ok := sc.mutation.X(); !ok {
		return &ValidationError{Name: "x", err: errors.New(`ent: missing required field "Shop.x"`)}
	}
	if _, ok := sc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "Shop.y"`)}
	}
	if _, ok := sc.mutation.AvgPrice(); !ok {
		return &ValidationError{Name: "avg_price", err: errors.New(`ent: missing required field "Shop.avg_price"`)}
	}
	if _, ok := sc.mutation.Sold(); !ok {
		return &ValidationError{Name: "sold", err: errors.New(`ent: missing required field "Shop.sold"`)}
	}
	if _, ok := sc.mutation.Comments(); !ok {
		return &ValidationError{Name: "comments", err: errors.New(`ent: missing required field "Shop.comments"`)}
	}
	if _, ok := sc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "Shop.score"`)}
	}
	if _, ok := sc.mutation.OpenHours(); !ok {
		return &ValidationError{Name: "open_hours", err: errors.New(`ent: missing required field "Shop.open_hours"`)}
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "Shop.createTime"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`ent: missing required field "Shop.updateTime"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := shop.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Shop.id": %w`, err)}
		}
	}
	return nil
}

func (sc *ShopCreate) sqlSave(ctx context.Context) (*Shop, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShopCreate) createSpec() (*Shop, *sqlgraph.CreateSpec) {
	var (
		_node = &Shop{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shop.Table, sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(shop.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.TypeID(); ok {
		_spec.SetField(shop.FieldTypeID, field.TypeUint64, value)
		_node.TypeID = value
	}
	if value, ok := sc.mutation.Images(); ok {
		_spec.SetField(shop.FieldImages, field.TypeString, value)
		_node.Images = value
	}
	if value, ok := sc.mutation.Area(); ok {
		_spec.SetField(shop.FieldArea, field.TypeString, value)
		_node.Area = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(shop.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sc.mutation.X(); ok {
		_spec.SetField(shop.FieldX, field.TypeFloat64, value)
		_node.X = value
	}
	if value, ok := sc.mutation.Y(); ok {
		_spec.SetField(shop.FieldY, field.TypeFloat64, value)
		_node.Y = value
	}
	if value, ok := sc.mutation.AvgPrice(); ok {
		_spec.SetField(shop.FieldAvgPrice, field.TypeUint64, value)
		_node.AvgPrice = value
	}
	if value, ok := sc.mutation.Sold(); ok {
		_spec.SetField(shop.FieldSold, field.TypeUint64, value)
		_node.Sold = value
	}
	if value, ok := sc.mutation.Comments(); ok {
		_spec.SetField(shop.FieldComments, field.TypeUint64, value)
		_node.Comments = value
	}
	if value, ok := sc.mutation.Score(); ok {
		_spec.SetField(shop.FieldScore, field.TypeInt8, value)
		_node.Score = value
	}
	if value, ok := sc.mutation.OpenHours(); ok {
		_spec.SetField(shop.FieldOpenHours, field.TypeString, value)
		_node.OpenHours = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(shop.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(shop.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// ShopCreateBulk is the builder for creating many Shop entities in bulk.
type ShopCreateBulk struct {
	config
	builders []*ShopCreate
}

// Save creates the Shop entities in the database.
func (scb *ShopCreateBulk) Save(ctx context.Context) ([]*Shop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shop, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShopCreateBulk) SaveX(ctx context.Context) []*Shop {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShopCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShopCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
