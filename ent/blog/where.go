// Code generated by ent, DO NOT EDIT.

package blog

import (
	"hmdp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldID, id))
}

// ShopId applies equality check predicate on the "shopId" field. It's identical to ShopIdEQ.
func ShopId(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldShopId, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldUserId, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldTitle, v))
}

// Images applies equality check predicate on the "images" field. It's identical to ImagesEQ.
func Images(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldImages, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldContent, v))
}

// Liked applies equality check predicate on the "liked" field. It's identical to LikedEQ.
func Liked(v int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldLiked, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldComments, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldUpdateTime, v))
}

// ShopIdEQ applies the EQ predicate on the "shopId" field.
func ShopIdEQ(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldShopId, v))
}

// ShopIdNEQ applies the NEQ predicate on the "shopId" field.
func ShopIdNEQ(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldShopId, v))
}

// ShopIdIn applies the In predicate on the "shopId" field.
func ShopIdIn(vs ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldShopId, vs...))
}

// ShopIdNotIn applies the NotIn predicate on the "shopId" field.
func ShopIdNotIn(vs ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldShopId, vs...))
}

// ShopIdGT applies the GT predicate on the "shopId" field.
func ShopIdGT(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldShopId, v))
}

// ShopIdGTE applies the GTE predicate on the "shopId" field.
func ShopIdGTE(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldShopId, v))
}

// ShopIdLT applies the LT predicate on the "shopId" field.
func ShopIdLT(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldShopId, v))
}

// ShopIdLTE applies the LTE predicate on the "shopId" field.
func ShopIdLTE(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldShopId, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldUserId, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContainsFold(FieldTitle, v))
}

// ImagesEQ applies the EQ predicate on the "images" field.
func ImagesEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldImages, v))
}

// ImagesNEQ applies the NEQ predicate on the "images" field.
func ImagesNEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldImages, v))
}

// ImagesIn applies the In predicate on the "images" field.
func ImagesIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldImages, vs...))
}

// ImagesNotIn applies the NotIn predicate on the "images" field.
func ImagesNotIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldImages, vs...))
}

// ImagesGT applies the GT predicate on the "images" field.
func ImagesGT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldImages, v))
}

// ImagesGTE applies the GTE predicate on the "images" field.
func ImagesGTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldImages, v))
}

// ImagesLT applies the LT predicate on the "images" field.
func ImagesLT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldImages, v))
}

// ImagesLTE applies the LTE predicate on the "images" field.
func ImagesLTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldImages, v))
}

// ImagesContains applies the Contains predicate on the "images" field.
func ImagesContains(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContains(FieldImages, v))
}

// ImagesHasPrefix applies the HasPrefix predicate on the "images" field.
func ImagesHasPrefix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasPrefix(FieldImages, v))
}

// ImagesHasSuffix applies the HasSuffix predicate on the "images" field.
func ImagesHasSuffix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasSuffix(FieldImages, v))
}

// ImagesEqualFold applies the EqualFold predicate on the "images" field.
func ImagesEqualFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEqualFold(FieldImages, v))
}

// ImagesContainsFold applies the ContainsFold predicate on the "images" field.
func ImagesContainsFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContainsFold(FieldImages, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContainsFold(FieldContent, v))
}

// LikedEQ applies the EQ predicate on the "liked" field.
func LikedEQ(v int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldLiked, v))
}

// LikedNEQ applies the NEQ predicate on the "liked" field.
func LikedNEQ(v int) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldLiked, v))
}

// LikedIn applies the In predicate on the "liked" field.
func LikedIn(vs ...int) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldLiked, vs...))
}

// LikedNotIn applies the NotIn predicate on the "liked" field.
func LikedNotIn(vs ...int) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldLiked, vs...))
}

// LikedGT applies the GT predicate on the "liked" field.
func LikedGT(v int) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldLiked, v))
}

// LikedGTE applies the GTE predicate on the "liked" field.
func LikedGTE(v int) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldLiked, v))
}

// LikedLT applies the LT predicate on the "liked" field.
func LikedLT(v int) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldLiked, v))
}

// LikedLTE applies the LTE predicate on the "liked" field.
func LikedLTE(v int) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldLiked, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v int) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...int) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...int) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v int) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v int) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v int) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v int) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldComments, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		p(s.Not())
	})
}
