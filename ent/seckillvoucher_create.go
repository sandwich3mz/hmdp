// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/seckillvoucher"
	"hmdp/ent/voucher"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeckillVoucherCreate is the builder for creating a SeckillVoucher entity.
type SeckillVoucherCreate struct {
	config
	mutation *SeckillVoucherMutation
	hooks    []Hook
}

// SetVoucherID sets the "voucher_id" field.
func (svc *SeckillVoucherCreate) SetVoucherID(u uint64) *SeckillVoucherCreate {
	svc.mutation.SetVoucherID(u)
	return svc
}

// SetStock sets the "stock" field.
func (svc *SeckillVoucherCreate) SetStock(u uint64) *SeckillVoucherCreate {
	svc.mutation.SetStock(u)
	return svc
}

// SetBeginTime sets the "begin_time" field.
func (svc *SeckillVoucherCreate) SetBeginTime(t time.Time) *SeckillVoucherCreate {
	svc.mutation.SetBeginTime(t)
	return svc
}

// SetEndTime sets the "end_time" field.
func (svc *SeckillVoucherCreate) SetEndTime(t time.Time) *SeckillVoucherCreate {
	svc.mutation.SetEndTime(t)
	return svc
}

// SetCreateTime sets the "create_time" field.
func (svc *SeckillVoucherCreate) SetCreateTime(t time.Time) *SeckillVoucherCreate {
	svc.mutation.SetCreateTime(t)
	return svc
}

// SetUpdateTime sets the "update_time" field.
func (svc *SeckillVoucherCreate) SetUpdateTime(t time.Time) *SeckillVoucherCreate {
	svc.mutation.SetUpdateTime(t)
	return svc
}

// SetID sets the "id" field.
func (svc *SeckillVoucherCreate) SetID(u uint64) *SeckillVoucherCreate {
	svc.mutation.SetID(u)
	return svc
}

// SetGetFormID sets the "getForm" edge to the Voucher entity by ID.
func (svc *SeckillVoucherCreate) SetGetFormID(id uint64) *SeckillVoucherCreate {
	svc.mutation.SetGetFormID(id)
	return svc
}

// SetGetForm sets the "getForm" edge to the Voucher entity.
func (svc *SeckillVoucherCreate) SetGetForm(v *Voucher) *SeckillVoucherCreate {
	return svc.SetGetFormID(v.ID)
}

// Mutation returns the SeckillVoucherMutation object of the builder.
func (svc *SeckillVoucherCreate) Mutation() *SeckillVoucherMutation {
	return svc.mutation
}

// Save creates the SeckillVoucher in the database.
func (svc *SeckillVoucherCreate) Save(ctx context.Context) (*SeckillVoucher, error) {
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SeckillVoucherCreate) SaveX(ctx context.Context) *SeckillVoucher {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SeckillVoucherCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SeckillVoucherCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SeckillVoucherCreate) check() error {
	if _, ok := svc.mutation.VoucherID(); !ok {
		return &ValidationError{Name: "voucher_id", err: errors.New(`ent: missing required field "SeckillVoucher.voucher_id"`)}
	}
	if _, ok := svc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "SeckillVoucher.stock"`)}
	}
	if _, ok := svc.mutation.BeginTime(); !ok {
		return &ValidationError{Name: "begin_time", err: errors.New(`ent: missing required field "SeckillVoucher.begin_time"`)}
	}
	if _, ok := svc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "SeckillVoucher.end_time"`)}
	}
	if _, ok := svc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SeckillVoucher.create_time"`)}
	}
	if _, ok := svc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SeckillVoucher.update_time"`)}
	}
	if _, ok := svc.mutation.GetFormID(); !ok {
		return &ValidationError{Name: "getForm", err: errors.New(`ent: missing required edge "SeckillVoucher.getForm"`)}
	}
	return nil
}

func (svc *SeckillVoucherCreate) sqlSave(ctx context.Context) (*SeckillVoucher, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SeckillVoucherCreate) createSpec() (*SeckillVoucher, *sqlgraph.CreateSpec) {
	var (
		_node = &SeckillVoucher{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(seckillvoucher.Table, sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64))
	)
	if id, ok := svc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svc.mutation.Stock(); ok {
		_spec.SetField(seckillvoucher.FieldStock, field.TypeUint64, value)
		_node.Stock = value
	}
	if value, ok := svc.mutation.BeginTime(); ok {
		_spec.SetField(seckillvoucher.FieldBeginTime, field.TypeTime, value)
		_node.BeginTime = value
	}
	if value, ok := svc.mutation.EndTime(); ok {
		_spec.SetField(seckillvoucher.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := svc.mutation.CreateTime(); ok {
		_spec.SetField(seckillvoucher.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := svc.mutation.UpdateTime(); ok {
		_spec.SetField(seckillvoucher.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := svc.mutation.GetFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seckillvoucher.GetFormTable,
			Columns: []string{seckillvoucher.GetFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VoucherID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeckillVoucherCreateBulk is the builder for creating many SeckillVoucher entities in bulk.
type SeckillVoucherCreateBulk struct {
	config
	builders []*SeckillVoucherCreate
}

// Save creates the SeckillVoucher entities in the database.
func (svcb *SeckillVoucherCreateBulk) Save(ctx context.Context) ([]*SeckillVoucher, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SeckillVoucher, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeckillVoucherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SeckillVoucherCreateBulk) SaveX(ctx context.Context) []*SeckillVoucher {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SeckillVoucherCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SeckillVoucherCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
