// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hmdp/ent/blog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Blog is the model entity for the Blog schema.
type Blog struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 商户id
	ShopId int64 `json:"shopId,omitempty"`
	// 用户id
	UserId int64 `json:"userId,omitempty"`
	// 标题
	Title string `json:"title,omitempty"`
	// 探店的照片
	Images string `json:"images,omitempty"`
	// 探店的内容
	Content string `json:"content,omitempty"`
	// 点赞的数量
	Liked int `json:"liked,omitempty"`
	// 评论数量
	Comments int `json:"comments,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"createTime,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"updateTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blog.FieldID, blog.FieldShopId, blog.FieldUserId, blog.FieldLiked, blog.FieldComments:
			values[i] = new(sql.NullInt64)
		case blog.FieldTitle, blog.FieldImages, blog.FieldContent:
			values[i] = new(sql.NullString)
		case blog.FieldCreateTime, blog.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blog fields.
func (b *Blog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int64(value.Int64)
		case blog.FieldShopId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shopId", values[i])
			} else if value.Valid {
				b.ShopId = value.Int64
			}
		case blog.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				b.UserId = value.Int64
			}
		case blog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case blog.FieldImages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value.Valid {
				b.Images = value.String
			}
		case blog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				b.Content = value.String
			}
		case blog.FieldLiked:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field liked", values[i])
			} else if value.Valid {
				b.Liked = int(value.Int64)
			}
		case blog.FieldComments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				b.Comments = int(value.Int64)
			}
		case blog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				b.CreateTime = value.Time
			}
		case blog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				b.UpdateTime = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Blog.
// This includes values selected through modifiers, order, etc.
func (b *Blog) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Blog.
// Note that you need to call Blog.Unwrap() before calling this method if this Blog
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blog) Update() *BlogUpdateOne {
	return NewBlogClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Blog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Blog) Unwrap() *Blog {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blog is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Blog) String() string {
	var builder strings.Builder
	builder.WriteString("Blog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("shopId=")
	builder.WriteString(fmt.Sprintf("%v", b.ShopId))
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", b.UserId))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(b.Images)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(b.Content)
	builder.WriteString(", ")
	builder.WriteString("liked=")
	builder.WriteString(fmt.Sprintf("%v", b.Liked))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fmt.Sprintf("%v", b.Comments))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(b.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(b.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Blogs is a parsable slice of Blog.
type Blogs []*Blog
