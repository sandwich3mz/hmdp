// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/predicate"
	"hmdp/ent/shoptype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopTypeUpdate is the builder for updating ShopType entities.
type ShopTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ShopTypeMutation
}

// Where appends a list predicates to the ShopTypeUpdate builder.
func (stu *ShopTypeUpdate) Where(ps ...predicate.ShopType) *ShopTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *ShopTypeUpdate) SetName(s string) *ShopTypeUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetIcon sets the "icon" field.
func (stu *ShopTypeUpdate) SetIcon(s string) *ShopTypeUpdate {
	stu.mutation.SetIcon(s)
	return stu
}

// SetSort sets the "sort" field.
func (stu *ShopTypeUpdate) SetSort(i int) *ShopTypeUpdate {
	stu.mutation.ResetSort()
	stu.mutation.SetSort(i)
	return stu
}

// AddSort adds i to the "sort" field.
func (stu *ShopTypeUpdate) AddSort(i int) *ShopTypeUpdate {
	stu.mutation.AddSort(i)
	return stu
}

// SetCreateTime sets the "createTime" field.
func (stu *ShopTypeUpdate) SetCreateTime(t time.Time) *ShopTypeUpdate {
	stu.mutation.SetCreateTime(t)
	return stu
}

// SetUpdateTime sets the "updateTime" field.
func (stu *ShopTypeUpdate) SetUpdateTime(t time.Time) *ShopTypeUpdate {
	stu.mutation.SetUpdateTime(t)
	return stu
}

// Mutation returns the ShopTypeMutation object of the builder.
func (stu *ShopTypeUpdate) Mutation() *ShopTypeMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ShopTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ShopTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ShopTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ShopTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *ShopTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoptype.Table, shoptype.Columns, sqlgraph.NewFieldSpec(shoptype.FieldID, field.TypeInt64))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.SetField(shoptype.FieldName, field.TypeString, value)
	}
	if value, ok := stu.mutation.Icon(); ok {
		_spec.SetField(shoptype.FieldIcon, field.TypeString, value)
	}
	if value, ok := stu.mutation.Sort(); ok {
		_spec.SetField(shoptype.FieldSort, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedSort(); ok {
		_spec.AddField(shoptype.FieldSort, field.TypeInt, value)
	}
	if value, ok := stu.mutation.CreateTime(); ok {
		_spec.SetField(shoptype.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := stu.mutation.UpdateTime(); ok {
		_spec.SetField(shoptype.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoptype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ShopTypeUpdateOne is the builder for updating a single ShopType entity.
type ShopTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopTypeMutation
}

// SetName sets the "name" field.
func (stuo *ShopTypeUpdateOne) SetName(s string) *ShopTypeUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetIcon sets the "icon" field.
func (stuo *ShopTypeUpdateOne) SetIcon(s string) *ShopTypeUpdateOne {
	stuo.mutation.SetIcon(s)
	return stuo
}

// SetSort sets the "sort" field.
func (stuo *ShopTypeUpdateOne) SetSort(i int) *ShopTypeUpdateOne {
	stuo.mutation.ResetSort()
	stuo.mutation.SetSort(i)
	return stuo
}

// AddSort adds i to the "sort" field.
func (stuo *ShopTypeUpdateOne) AddSort(i int) *ShopTypeUpdateOne {
	stuo.mutation.AddSort(i)
	return stuo
}

// SetCreateTime sets the "createTime" field.
func (stuo *ShopTypeUpdateOne) SetCreateTime(t time.Time) *ShopTypeUpdateOne {
	stuo.mutation.SetCreateTime(t)
	return stuo
}

// SetUpdateTime sets the "updateTime" field.
func (stuo *ShopTypeUpdateOne) SetUpdateTime(t time.Time) *ShopTypeUpdateOne {
	stuo.mutation.SetUpdateTime(t)
	return stuo
}

// Mutation returns the ShopTypeMutation object of the builder.
func (stuo *ShopTypeUpdateOne) Mutation() *ShopTypeMutation {
	return stuo.mutation
}

// Where appends a list predicates to the ShopTypeUpdate builder.
func (stuo *ShopTypeUpdateOne) Where(ps ...predicate.ShopType) *ShopTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ShopTypeUpdateOne) Select(field string, fields ...string) *ShopTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ShopType entity.
func (stuo *ShopTypeUpdateOne) Save(ctx context.Context) (*ShopType, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ShopTypeUpdateOne) SaveX(ctx context.Context) *ShopType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ShopTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ShopTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *ShopTypeUpdateOne) sqlSave(ctx context.Context) (_node *ShopType, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoptype.Table, shoptype.Columns, sqlgraph.NewFieldSpec(shoptype.FieldID, field.TypeInt64))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShopType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoptype.FieldID)
		for _, f := range fields {
			if !shoptype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoptype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.SetField(shoptype.FieldName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Icon(); ok {
		_spec.SetField(shoptype.FieldIcon, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Sort(); ok {
		_spec.SetField(shoptype.FieldSort, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedSort(); ok {
		_spec.AddField(shoptype.FieldSort, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.CreateTime(); ok {
		_spec.SetField(shoptype.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.UpdateTime(); ok {
		_spec.SetField(shoptype.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &ShopType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoptype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
