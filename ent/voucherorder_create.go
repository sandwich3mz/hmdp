// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/voucherorder"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoucherOrderCreate is the builder for creating a VoucherOrder entity.
type VoucherOrderCreate struct {
	config
	mutation *VoucherOrderMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (voc *VoucherOrderCreate) SetUserID(u uint64) *VoucherOrderCreate {
	voc.mutation.SetUserID(u)
	return voc
}

// SetVoucherID sets the "voucher_id" field.
func (voc *VoucherOrderCreate) SetVoucherID(u uint64) *VoucherOrderCreate {
	voc.mutation.SetVoucherID(u)
	return voc
}

// SetPayType sets the "pay_type" field.
func (voc *VoucherOrderCreate) SetPayType(i int8) *VoucherOrderCreate {
	voc.mutation.SetPayType(i)
	return voc
}

// SetNillablePayType sets the "pay_type" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillablePayType(i *int8) *VoucherOrderCreate {
	if i != nil {
		voc.SetPayType(*i)
	}
	return voc
}

// SetStatus sets the "status" field.
func (voc *VoucherOrderCreate) SetStatus(i int8) *VoucherOrderCreate {
	voc.mutation.SetStatus(i)
	return voc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillableStatus(i *int8) *VoucherOrderCreate {
	if i != nil {
		voc.SetStatus(*i)
	}
	return voc
}

// SetPayTime sets the "pay_time" field.
func (voc *VoucherOrderCreate) SetPayTime(t time.Time) *VoucherOrderCreate {
	voc.mutation.SetPayTime(t)
	return voc
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillablePayTime(t *time.Time) *VoucherOrderCreate {
	if t != nil {
		voc.SetPayTime(*t)
	}
	return voc
}

// SetUseTime sets the "use_time" field.
func (voc *VoucherOrderCreate) SetUseTime(t time.Time) *VoucherOrderCreate {
	voc.mutation.SetUseTime(t)
	return voc
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillableUseTime(t *time.Time) *VoucherOrderCreate {
	if t != nil {
		voc.SetUseTime(*t)
	}
	return voc
}

// SetRefundTime sets the "refund_time" field.
func (voc *VoucherOrderCreate) SetRefundTime(t time.Time) *VoucherOrderCreate {
	voc.mutation.SetRefundTime(t)
	return voc
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillableRefundTime(t *time.Time) *VoucherOrderCreate {
	if t != nil {
		voc.SetRefundTime(*t)
	}
	return voc
}

// SetCreateTime sets the "create_time" field.
func (voc *VoucherOrderCreate) SetCreateTime(t time.Time) *VoucherOrderCreate {
	voc.mutation.SetCreateTime(t)
	return voc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillableCreateTime(t *time.Time) *VoucherOrderCreate {
	if t != nil {
		voc.SetCreateTime(*t)
	}
	return voc
}

// SetUpdateTime sets the "update_time" field.
func (voc *VoucherOrderCreate) SetUpdateTime(t time.Time) *VoucherOrderCreate {
	voc.mutation.SetUpdateTime(t)
	return voc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (voc *VoucherOrderCreate) SetNillableUpdateTime(t *time.Time) *VoucherOrderCreate {
	if t != nil {
		voc.SetUpdateTime(*t)
	}
	return voc
}

// SetID sets the "id" field.
func (voc *VoucherOrderCreate) SetID(i int64) *VoucherOrderCreate {
	voc.mutation.SetID(i)
	return voc
}

// Mutation returns the VoucherOrderMutation object of the builder.
func (voc *VoucherOrderCreate) Mutation() *VoucherOrderMutation {
	return voc.mutation
}

// Save creates the VoucherOrder in the database.
func (voc *VoucherOrderCreate) Save(ctx context.Context) (*VoucherOrder, error) {
	voc.defaults()
	return withHooks(ctx, voc.sqlSave, voc.mutation, voc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (voc *VoucherOrderCreate) SaveX(ctx context.Context) *VoucherOrder {
	v, err := voc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (voc *VoucherOrderCreate) Exec(ctx context.Context) error {
	_, err := voc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (voc *VoucherOrderCreate) ExecX(ctx context.Context) {
	if err := voc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (voc *VoucherOrderCreate) defaults() {
	if _, ok := voc.mutation.CreateTime(); !ok {
		v := voucherorder.DefaultCreateTime
		voc.mutation.SetCreateTime(v)
	}
	if _, ok := voc.mutation.UpdateTime(); !ok {
		v := voucherorder.DefaultUpdateTime
		voc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (voc *VoucherOrderCreate) check() error {
	if _, ok := voc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "VoucherOrder.user_id"`)}
	}
	if _, ok := voc.mutation.VoucherID(); !ok {
		return &ValidationError{Name: "voucher_id", err: errors.New(`ent: missing required field "VoucherOrder.voucher_id"`)}
	}
	if _, ok := voc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "VoucherOrder.create_time"`)}
	}
	if _, ok := voc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "VoucherOrder.update_time"`)}
	}
	return nil
}

func (voc *VoucherOrderCreate) sqlSave(ctx context.Context) (*VoucherOrder, error) {
	if err := voc.check(); err != nil {
		return nil, err
	}
	_node, _spec := voc.createSpec()
	if err := sqlgraph.CreateNode(ctx, voc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	voc.mutation.id = &_node.ID
	voc.mutation.done = true
	return _node, nil
}

func (voc *VoucherOrderCreate) createSpec() (*VoucherOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &VoucherOrder{config: voc.config}
		_spec = sqlgraph.NewCreateSpec(voucherorder.Table, sqlgraph.NewFieldSpec(voucherorder.FieldID, field.TypeInt64))
	)
	if id, ok := voc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := voc.mutation.UserID(); ok {
		_spec.SetField(voucherorder.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := voc.mutation.VoucherID(); ok {
		_spec.SetField(voucherorder.FieldVoucherID, field.TypeUint64, value)
		_node.VoucherID = value
	}
	if value, ok := voc.mutation.PayType(); ok {
		_spec.SetField(voucherorder.FieldPayType, field.TypeInt8, value)
		_node.PayType = value
	}
	if value, ok := voc.mutation.Status(); ok {
		_spec.SetField(voucherorder.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := voc.mutation.PayTime(); ok {
		_spec.SetField(voucherorder.FieldPayTime, field.TypeTime, value)
		_node.PayTime = value
	}
	if value, ok := voc.mutation.UseTime(); ok {
		_spec.SetField(voucherorder.FieldUseTime, field.TypeTime, value)
		_node.UseTime = value
	}
	if value, ok := voc.mutation.RefundTime(); ok {
		_spec.SetField(voucherorder.FieldRefundTime, field.TypeTime, value)
		_node.RefundTime = value
	}
	if value, ok := voc.mutation.CreateTime(); ok {
		_spec.SetField(voucherorder.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := voc.mutation.UpdateTime(); ok {
		_spec.SetField(voucherorder.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// VoucherOrderCreateBulk is the builder for creating many VoucherOrder entities in bulk.
type VoucherOrderCreateBulk struct {
	config
	builders []*VoucherOrderCreate
}

// Save creates the VoucherOrder entities in the database.
func (vocb *VoucherOrderCreateBulk) Save(ctx context.Context) ([]*VoucherOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vocb.builders))
	nodes := make([]*VoucherOrder, len(vocb.builders))
	mutators := make([]Mutator, len(vocb.builders))
	for i := range vocb.builders {
		func(i int, root context.Context) {
			builder := vocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoucherOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vocb *VoucherOrderCreateBulk) SaveX(ctx context.Context) []*VoucherOrder {
	v, err := vocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vocb *VoucherOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := vocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vocb *VoucherOrderCreateBulk) ExecX(ctx context.Context) {
	if err := vocb.Exec(ctx); err != nil {
		panic(err)
	}
}
