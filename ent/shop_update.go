// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/predicate"
	"hmdp/ent/shop"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopUpdate is the builder for updating Shop entities.
type ShopUpdate struct {
	config
	hooks    []Hook
	mutation *ShopMutation
}

// Where appends a list predicates to the ShopUpdate builder.
func (su *ShopUpdate) Where(ps ...predicate.Shop) *ShopUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ShopUpdate) SetName(s string) *ShopUpdate {
	su.mutation.SetName(s)
	return su
}

// SetTypeID sets the "type_id" field.
func (su *ShopUpdate) SetTypeID(u uint64) *ShopUpdate {
	su.mutation.ResetTypeID()
	su.mutation.SetTypeID(u)
	return su
}

// AddTypeID adds u to the "type_id" field.
func (su *ShopUpdate) AddTypeID(u int64) *ShopUpdate {
	su.mutation.AddTypeID(u)
	return su
}

// SetImages sets the "images" field.
func (su *ShopUpdate) SetImages(s string) *ShopUpdate {
	su.mutation.SetImages(s)
	return su
}

// SetArea sets the "area" field.
func (su *ShopUpdate) SetArea(s string) *ShopUpdate {
	su.mutation.SetArea(s)
	return su
}

// SetAddress sets the "address" field.
func (su *ShopUpdate) SetAddress(s string) *ShopUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetX sets the "x" field.
func (su *ShopUpdate) SetX(f float64) *ShopUpdate {
	su.mutation.ResetX()
	su.mutation.SetX(f)
	return su
}

// AddX adds f to the "x" field.
func (su *ShopUpdate) AddX(f float64) *ShopUpdate {
	su.mutation.AddX(f)
	return su
}

// SetY sets the "y" field.
func (su *ShopUpdate) SetY(f float64) *ShopUpdate {
	su.mutation.ResetY()
	su.mutation.SetY(f)
	return su
}

// AddY adds f to the "y" field.
func (su *ShopUpdate) AddY(f float64) *ShopUpdate {
	su.mutation.AddY(f)
	return su
}

// SetAvgPrice sets the "avg_price" field.
func (su *ShopUpdate) SetAvgPrice(u uint64) *ShopUpdate {
	su.mutation.ResetAvgPrice()
	su.mutation.SetAvgPrice(u)
	return su
}

// AddAvgPrice adds u to the "avg_price" field.
func (su *ShopUpdate) AddAvgPrice(u int64) *ShopUpdate {
	su.mutation.AddAvgPrice(u)
	return su
}

// SetSold sets the "sold" field.
func (su *ShopUpdate) SetSold(u uint64) *ShopUpdate {
	su.mutation.ResetSold()
	su.mutation.SetSold(u)
	return su
}

// AddSold adds u to the "sold" field.
func (su *ShopUpdate) AddSold(u int64) *ShopUpdate {
	su.mutation.AddSold(u)
	return su
}

// SetComments sets the "comments" field.
func (su *ShopUpdate) SetComments(u uint64) *ShopUpdate {
	su.mutation.ResetComments()
	su.mutation.SetComments(u)
	return su
}

// AddComments adds u to the "comments" field.
func (su *ShopUpdate) AddComments(u int64) *ShopUpdate {
	su.mutation.AddComments(u)
	return su
}

// SetScore sets the "score" field.
func (su *ShopUpdate) SetScore(i int8) *ShopUpdate {
	su.mutation.ResetScore()
	su.mutation.SetScore(i)
	return su
}

// AddScore adds i to the "score" field.
func (su *ShopUpdate) AddScore(i int8) *ShopUpdate {
	su.mutation.AddScore(i)
	return su
}

// SetOpenHours sets the "open_hours" field.
func (su *ShopUpdate) SetOpenHours(s string) *ShopUpdate {
	su.mutation.SetOpenHours(s)
	return su
}

// SetCreateTime sets the "createTime" field.
func (su *ShopUpdate) SetCreateTime(t time.Time) *ShopUpdate {
	su.mutation.SetCreateTime(t)
	return su
}

// SetUpdateTime sets the "updateTime" field.
func (su *ShopUpdate) SetUpdateTime(t time.Time) *ShopUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// Mutation returns the ShopMutation object of the builder.
func (su *ShopUpdate) Mutation() *ShopMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShopUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShopUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShopUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShopUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shop.Table, shop.Columns, sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(shop.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.TypeID(); ok {
		_spec.SetField(shop.FieldTypeID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedTypeID(); ok {
		_spec.AddField(shop.FieldTypeID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Images(); ok {
		_spec.SetField(shop.FieldImages, field.TypeString, value)
	}
	if value, ok := su.mutation.Area(); ok {
		_spec.SetField(shop.FieldArea, field.TypeString, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(shop.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.X(); ok {
		_spec.SetField(shop.FieldX, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedX(); ok {
		_spec.AddField(shop.FieldX, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Y(); ok {
		_spec.SetField(shop.FieldY, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedY(); ok {
		_spec.AddField(shop.FieldY, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AvgPrice(); ok {
		_spec.SetField(shop.FieldAvgPrice, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedAvgPrice(); ok {
		_spec.AddField(shop.FieldAvgPrice, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Sold(); ok {
		_spec.SetField(shop.FieldSold, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedSold(); ok {
		_spec.AddField(shop.FieldSold, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Comments(); ok {
		_spec.SetField(shop.FieldComments, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedComments(); ok {
		_spec.AddField(shop.FieldComments, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Score(); ok {
		_spec.SetField(shop.FieldScore, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedScore(); ok {
		_spec.AddField(shop.FieldScore, field.TypeInt8, value)
	}
	if value, ok := su.mutation.OpenHours(); ok {
		_spec.SetField(shop.FieldOpenHours, field.TypeString, value)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(shop.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(shop.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShopUpdateOne is the builder for updating a single Shop entity.
type ShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopMutation
}

// SetName sets the "name" field.
func (suo *ShopUpdateOne) SetName(s string) *ShopUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetTypeID sets the "type_id" field.
func (suo *ShopUpdateOne) SetTypeID(u uint64) *ShopUpdateOne {
	suo.mutation.ResetTypeID()
	suo.mutation.SetTypeID(u)
	return suo
}

// AddTypeID adds u to the "type_id" field.
func (suo *ShopUpdateOne) AddTypeID(u int64) *ShopUpdateOne {
	suo.mutation.AddTypeID(u)
	return suo
}

// SetImages sets the "images" field.
func (suo *ShopUpdateOne) SetImages(s string) *ShopUpdateOne {
	suo.mutation.SetImages(s)
	return suo
}

// SetArea sets the "area" field.
func (suo *ShopUpdateOne) SetArea(s string) *ShopUpdateOne {
	suo.mutation.SetArea(s)
	return suo
}

// SetAddress sets the "address" field.
func (suo *ShopUpdateOne) SetAddress(s string) *ShopUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetX sets the "x" field.
func (suo *ShopUpdateOne) SetX(f float64) *ShopUpdateOne {
	suo.mutation.ResetX()
	suo.mutation.SetX(f)
	return suo
}

// AddX adds f to the "x" field.
func (suo *ShopUpdateOne) AddX(f float64) *ShopUpdateOne {
	suo.mutation.AddX(f)
	return suo
}

// SetY sets the "y" field.
func (suo *ShopUpdateOne) SetY(f float64) *ShopUpdateOne {
	suo.mutation.ResetY()
	suo.mutation.SetY(f)
	return suo
}

// AddY adds f to the "y" field.
func (suo *ShopUpdateOne) AddY(f float64) *ShopUpdateOne {
	suo.mutation.AddY(f)
	return suo
}

// SetAvgPrice sets the "avg_price" field.
func (suo *ShopUpdateOne) SetAvgPrice(u uint64) *ShopUpdateOne {
	suo.mutation.ResetAvgPrice()
	suo.mutation.SetAvgPrice(u)
	return suo
}

// AddAvgPrice adds u to the "avg_price" field.
func (suo *ShopUpdateOne) AddAvgPrice(u int64) *ShopUpdateOne {
	suo.mutation.AddAvgPrice(u)
	return suo
}

// SetSold sets the "sold" field.
func (suo *ShopUpdateOne) SetSold(u uint64) *ShopUpdateOne {
	suo.mutation.ResetSold()
	suo.mutation.SetSold(u)
	return suo
}

// AddSold adds u to the "sold" field.
func (suo *ShopUpdateOne) AddSold(u int64) *ShopUpdateOne {
	suo.mutation.AddSold(u)
	return suo
}

// SetComments sets the "comments" field.
func (suo *ShopUpdateOne) SetComments(u uint64) *ShopUpdateOne {
	suo.mutation.ResetComments()
	suo.mutation.SetComments(u)
	return suo
}

// AddComments adds u to the "comments" field.
func (suo *ShopUpdateOne) AddComments(u int64) *ShopUpdateOne {
	suo.mutation.AddComments(u)
	return suo
}

// SetScore sets the "score" field.
func (suo *ShopUpdateOne) SetScore(i int8) *ShopUpdateOne {
	suo.mutation.ResetScore()
	suo.mutation.SetScore(i)
	return suo
}

// AddScore adds i to the "score" field.
func (suo *ShopUpdateOne) AddScore(i int8) *ShopUpdateOne {
	suo.mutation.AddScore(i)
	return suo
}

// SetOpenHours sets the "open_hours" field.
func (suo *ShopUpdateOne) SetOpenHours(s string) *ShopUpdateOne {
	suo.mutation.SetOpenHours(s)
	return suo
}

// SetCreateTime sets the "createTime" field.
func (suo *ShopUpdateOne) SetCreateTime(t time.Time) *ShopUpdateOne {
	suo.mutation.SetCreateTime(t)
	return suo
}

// SetUpdateTime sets the "updateTime" field.
func (suo *ShopUpdateOne) SetUpdateTime(t time.Time) *ShopUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// Mutation returns the ShopMutation object of the builder.
func (suo *ShopUpdateOne) Mutation() *ShopMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShopUpdate builder.
func (suo *ShopUpdateOne) Where(ps ...predicate.Shop) *ShopUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShopUpdateOne) Select(field string, fields ...string) *ShopUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shop entity.
func (suo *ShopUpdateOne) Save(ctx context.Context) (*Shop, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShopUpdateOne) SaveX(ctx context.Context) *Shop {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShopUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShopUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShopUpdateOne) sqlSave(ctx context.Context) (_node *Shop, err error) {
	_spec := sqlgraph.NewUpdateSpec(shop.Table, shop.Columns, sqlgraph.NewFieldSpec(shop.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shop.FieldID)
		for _, f := range fields {
			if !shop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(shop.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.TypeID(); ok {
		_spec.SetField(shop.FieldTypeID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedTypeID(); ok {
		_spec.AddField(shop.FieldTypeID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Images(); ok {
		_spec.SetField(shop.FieldImages, field.TypeString, value)
	}
	if value, ok := suo.mutation.Area(); ok {
		_spec.SetField(shop.FieldArea, field.TypeString, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(shop.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.X(); ok {
		_spec.SetField(shop.FieldX, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedX(); ok {
		_spec.AddField(shop.FieldX, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Y(); ok {
		_spec.SetField(shop.FieldY, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedY(); ok {
		_spec.AddField(shop.FieldY, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AvgPrice(); ok {
		_spec.SetField(shop.FieldAvgPrice, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedAvgPrice(); ok {
		_spec.AddField(shop.FieldAvgPrice, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Sold(); ok {
		_spec.SetField(shop.FieldSold, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedSold(); ok {
		_spec.AddField(shop.FieldSold, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Comments(); ok {
		_spec.SetField(shop.FieldComments, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedComments(); ok {
		_spec.AddField(shop.FieldComments, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Score(); ok {
		_spec.SetField(shop.FieldScore, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedScore(); ok {
		_spec.AddField(shop.FieldScore, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.OpenHours(); ok {
		_spec.SetField(shop.FieldOpenHours, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(shop.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(shop.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Shop{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
