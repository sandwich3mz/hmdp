// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/shoptype"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopTypeCreate is the builder for creating a ShopType entity.
type ShopTypeCreate struct {
	config
	mutation *ShopTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (stc *ShopTypeCreate) SetName(s string) *ShopTypeCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetIcon sets the "icon" field.
func (stc *ShopTypeCreate) SetIcon(s string) *ShopTypeCreate {
	stc.mutation.SetIcon(s)
	return stc
}

// SetSort sets the "sort" field.
func (stc *ShopTypeCreate) SetSort(i int) *ShopTypeCreate {
	stc.mutation.SetSort(i)
	return stc
}

// SetCreateTime sets the "createTime" field.
func (stc *ShopTypeCreate) SetCreateTime(t time.Time) *ShopTypeCreate {
	stc.mutation.SetCreateTime(t)
	return stc
}

// SetUpdateTime sets the "updateTime" field.
func (stc *ShopTypeCreate) SetUpdateTime(t time.Time) *ShopTypeCreate {
	stc.mutation.SetUpdateTime(t)
	return stc
}

// SetID sets the "id" field.
func (stc *ShopTypeCreate) SetID(i int64) *ShopTypeCreate {
	stc.mutation.SetID(i)
	return stc
}

// Mutation returns the ShopTypeMutation object of the builder.
func (stc *ShopTypeCreate) Mutation() *ShopTypeMutation {
	return stc.mutation
}

// Save creates the ShopType in the database.
func (stc *ShopTypeCreate) Save(ctx context.Context) (*ShopType, error) {
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ShopTypeCreate) SaveX(ctx context.Context) *ShopType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ShopTypeCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ShopTypeCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ShopTypeCreate) check() error {
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ShopType.name"`)}
	}
	if _, ok := stc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "ShopType.icon"`)}
	}
	if _, ok := stc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "ShopType.sort"`)}
	}
	if _, ok := stc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "ShopType.createTime"`)}
	}
	if _, ok := stc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`ent: missing required field "ShopType.updateTime"`)}
	}
	if v, ok := stc.mutation.ID(); ok {
		if err := shoptype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ShopType.id": %w`, err)}
		}
	}
	return nil
}

func (stc *ShopTypeCreate) sqlSave(ctx context.Context) (*ShopType, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *ShopTypeCreate) createSpec() (*ShopType, *sqlgraph.CreateSpec) {
	var (
		_node = &ShopType{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(shoptype.Table, sqlgraph.NewFieldSpec(shoptype.FieldID, field.TypeInt64))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(shoptype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.Icon(); ok {
		_spec.SetField(shoptype.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := stc.mutation.Sort(); ok {
		_spec.SetField(shoptype.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := stc.mutation.CreateTime(); ok {
		_spec.SetField(shoptype.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := stc.mutation.UpdateTime(); ok {
		_spec.SetField(shoptype.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// ShopTypeCreateBulk is the builder for creating many ShopType entities in bulk.
type ShopTypeCreateBulk struct {
	config
	builders []*ShopTypeCreate
}

// Save creates the ShopType entities in the database.
func (stcb *ShopTypeCreateBulk) Save(ctx context.Context) ([]*ShopType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ShopType, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShopTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ShopTypeCreateBulk) SaveX(ctx context.Context) []*ShopType {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ShopTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ShopTypeCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
