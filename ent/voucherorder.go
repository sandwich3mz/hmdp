// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hmdp/ent/voucherorder"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VoucherOrder is the model entity for the VoucherOrder schema.
type VoucherOrder struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 下单的用户id
	UserID uint64 `json:"userId"`
	// 购买的优惠券id
	VoucherID uint64 `json:"voucherId"`
	// 支付方式
	PayType int8 `json:"payType"`
	// 订单状态
	Status int8 `json:"status,omitempty"`
	// 支付时间
	PayTime time.Time `json:"payTime"`
	// 核销时间
	UseTime time.Time `json:"useTime"`
	// 退款时间
	RefundTime time.Time `json:"refundTime"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoucherOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voucherorder.FieldID, voucherorder.FieldUserID, voucherorder.FieldVoucherID, voucherorder.FieldPayType, voucherorder.FieldStatus:
			values[i] = new(sql.NullInt64)
		case voucherorder.FieldPayTime, voucherorder.FieldUseTime, voucherorder.FieldRefundTime, voucherorder.FieldCreateTime, voucherorder.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoucherOrder fields.
func (vo *VoucherOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voucherorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vo.ID = int64(value.Int64)
		case voucherorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vo.UserID = uint64(value.Int64)
			}
		case voucherorder.FieldVoucherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field voucher_id", values[i])
			} else if value.Valid {
				vo.VoucherID = uint64(value.Int64)
			}
		case voucherorder.FieldPayType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_type", values[i])
			} else if value.Valid {
				vo.PayType = int8(value.Int64)
			}
		case voucherorder.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				vo.Status = int8(value.Int64)
			}
		case voucherorder.FieldPayTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pay_time", values[i])
			} else if value.Valid {
				vo.PayTime = value.Time
			}
		case voucherorder.FieldUseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_time", values[i])
			} else if value.Valid {
				vo.UseTime = value.Time
			}
		case voucherorder.FieldRefundTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_time", values[i])
			} else if value.Valid {
				vo.RefundTime = value.Time
			}
		case voucherorder.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				vo.CreateTime = value.Time
			}
		case voucherorder.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				vo.UpdateTime = value.Time
			}
		default:
			vo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VoucherOrder.
// This includes values selected through modifiers, order, etc.
func (vo *VoucherOrder) Value(name string) (ent.Value, error) {
	return vo.selectValues.Get(name)
}

// Update returns a builder for updating this VoucherOrder.
// Note that you need to call VoucherOrder.Unwrap() before calling this method if this VoucherOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (vo *VoucherOrder) Update() *VoucherOrderUpdateOne {
	return NewVoucherOrderClient(vo.config).UpdateOne(vo)
}

// Unwrap unwraps the VoucherOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vo *VoucherOrder) Unwrap() *VoucherOrder {
	_tx, ok := vo.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoucherOrder is not a transactional entity")
	}
	vo.config.driver = _tx.drv
	return vo
}

// String implements the fmt.Stringer.
func (vo *VoucherOrder) String() string {
	var builder strings.Builder
	builder.WriteString("VoucherOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vo.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.UserID))
	builder.WriteString(", ")
	builder.WriteString("voucher_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.VoucherID))
	builder.WriteString(", ")
	builder.WriteString("pay_type=")
	builder.WriteString(fmt.Sprintf("%v", vo.PayType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", vo.Status))
	builder.WriteString(", ")
	builder.WriteString("pay_time=")
	builder.WriteString(vo.PayTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("use_time=")
	builder.WriteString(vo.UseTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("refund_time=")
	builder.WriteString(vo.RefundTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(vo.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(vo.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VoucherOrders is a parsable slice of VoucherOrder.
type VoucherOrders []*VoucherOrder
