// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/predicate"
	"hmdp/ent/seckillvoucher"
	"hmdp/ent/voucher"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoucherUpdate is the builder for updating Voucher entities.
type VoucherUpdate struct {
	config
	hooks    []Hook
	mutation *VoucherMutation
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vu *VoucherUpdate) Where(ps ...predicate.Voucher) *VoucherUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetShopID sets the "shop_id" field.
func (vu *VoucherUpdate) SetShopID(u uint64) *VoucherUpdate {
	vu.mutation.ResetShopID()
	vu.mutation.SetShopID(u)
	return vu
}

// AddShopID adds u to the "shop_id" field.
func (vu *VoucherUpdate) AddShopID(u int64) *VoucherUpdate {
	vu.mutation.AddShopID(u)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VoucherUpdate) SetTitle(s string) *VoucherUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetSubTitle sets the "sub_title" field.
func (vu *VoucherUpdate) SetSubTitle(s string) *VoucherUpdate {
	vu.mutation.SetSubTitle(s)
	return vu
}

// SetRules sets the "rules" field.
func (vu *VoucherUpdate) SetRules(s string) *VoucherUpdate {
	vu.mutation.SetRules(s)
	return vu
}

// SetPayValue sets the "pay_value" field.
func (vu *VoucherUpdate) SetPayValue(u uint64) *VoucherUpdate {
	vu.mutation.ResetPayValue()
	vu.mutation.SetPayValue(u)
	return vu
}

// AddPayValue adds u to the "pay_value" field.
func (vu *VoucherUpdate) AddPayValue(u int64) *VoucherUpdate {
	vu.mutation.AddPayValue(u)
	return vu
}

// SetActualValue sets the "actual_value" field.
func (vu *VoucherUpdate) SetActualValue(i int64) *VoucherUpdate {
	vu.mutation.ResetActualValue()
	vu.mutation.SetActualValue(i)
	return vu
}

// AddActualValue adds i to the "actual_value" field.
func (vu *VoucherUpdate) AddActualValue(i int64) *VoucherUpdate {
	vu.mutation.AddActualValue(i)
	return vu
}

// SetType sets the "type" field.
func (vu *VoucherUpdate) SetType(i int8) *VoucherUpdate {
	vu.mutation.ResetType()
	vu.mutation.SetType(i)
	return vu
}

// AddType adds i to the "type" field.
func (vu *VoucherUpdate) AddType(i int8) *VoucherUpdate {
	vu.mutation.AddType(i)
	return vu
}

// SetStatus sets the "status" field.
func (vu *VoucherUpdate) SetStatus(i int8) *VoucherUpdate {
	vu.mutation.ResetStatus()
	vu.mutation.SetStatus(i)
	return vu
}

// AddStatus adds i to the "status" field.
func (vu *VoucherUpdate) AddStatus(i int8) *VoucherUpdate {
	vu.mutation.AddStatus(i)
	return vu
}

// SetCreateTime sets the "create_time" field.
func (vu *VoucherUpdate) SetCreateTime(t time.Time) *VoucherUpdate {
	vu.mutation.SetCreateTime(t)
	return vu
}

// SetUpdateTime sets the "update_time" field.
func (vu *VoucherUpdate) SetUpdateTime(t time.Time) *VoucherUpdate {
	vu.mutation.SetUpdateTime(t)
	return vu
}

// AddGetMoreIDs adds the "getMore" edge to the SeckillVoucher entity by IDs.
func (vu *VoucherUpdate) AddGetMoreIDs(ids ...uint64) *VoucherUpdate {
	vu.mutation.AddGetMoreIDs(ids...)
	return vu
}

// AddGetMore adds the "getMore" edges to the SeckillVoucher entity.
func (vu *VoucherUpdate) AddGetMore(s ...*SeckillVoucher) *VoucherUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.AddGetMoreIDs(ids...)
}

// Mutation returns the VoucherMutation object of the builder.
func (vu *VoucherUpdate) Mutation() *VoucherMutation {
	return vu.mutation
}

// ClearGetMore clears all "getMore" edges to the SeckillVoucher entity.
func (vu *VoucherUpdate) ClearGetMore() *VoucherUpdate {
	vu.mutation.ClearGetMore()
	return vu
}

// RemoveGetMoreIDs removes the "getMore" edge to SeckillVoucher entities by IDs.
func (vu *VoucherUpdate) RemoveGetMoreIDs(ids ...uint64) *VoucherUpdate {
	vu.mutation.RemoveGetMoreIDs(ids...)
	return vu
}

// RemoveGetMore removes "getMore" edges to SeckillVoucher entities.
func (vu *VoucherUpdate) RemoveGetMore(s ...*SeckillVoucher) *VoucherUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.RemoveGetMoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoucherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoucherUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoucherUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.ShopID(); ok {
		_spec.SetField(voucher.FieldShopID, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.AddedShopID(); ok {
		_spec.AddField(voucher.FieldShopID, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(voucher.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.SubTitle(); ok {
		_spec.SetField(voucher.FieldSubTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Rules(); ok {
		_spec.SetField(voucher.FieldRules, field.TypeString, value)
	}
	if value, ok := vu.mutation.PayValue(); ok {
		_spec.SetField(voucher.FieldPayValue, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.AddedPayValue(); ok {
		_spec.AddField(voucher.FieldPayValue, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.ActualValue(); ok {
		_spec.SetField(voucher.FieldActualValue, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedActualValue(); ok {
		_spec.AddField(voucher.FieldActualValue, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(voucher.FieldType, field.TypeInt8, value)
	}
	if value, ok := vu.mutation.AddedType(); ok {
		_spec.AddField(voucher.FieldType, field.TypeInt8, value)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(voucher.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vu.mutation.AddedStatus(); ok {
		_spec.AddField(voucher.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vu.mutation.CreateTime(); ok {
		_spec.SetField(voucher.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdateTime(); ok {
		_spec.SetField(voucher.FieldUpdateTime, field.TypeTime, value)
	}
	if vu.mutation.GetMoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedGetMoreIDs(); len(nodes) > 0 && !vu.mutation.GetMoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.GetMoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoucherUpdateOne is the builder for updating a single Voucher entity.
type VoucherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoucherMutation
}

// SetShopID sets the "shop_id" field.
func (vuo *VoucherUpdateOne) SetShopID(u uint64) *VoucherUpdateOne {
	vuo.mutation.ResetShopID()
	vuo.mutation.SetShopID(u)
	return vuo
}

// AddShopID adds u to the "shop_id" field.
func (vuo *VoucherUpdateOne) AddShopID(u int64) *VoucherUpdateOne {
	vuo.mutation.AddShopID(u)
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VoucherUpdateOne) SetTitle(s string) *VoucherUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetSubTitle sets the "sub_title" field.
func (vuo *VoucherUpdateOne) SetSubTitle(s string) *VoucherUpdateOne {
	vuo.mutation.SetSubTitle(s)
	return vuo
}

// SetRules sets the "rules" field.
func (vuo *VoucherUpdateOne) SetRules(s string) *VoucherUpdateOne {
	vuo.mutation.SetRules(s)
	return vuo
}

// SetPayValue sets the "pay_value" field.
func (vuo *VoucherUpdateOne) SetPayValue(u uint64) *VoucherUpdateOne {
	vuo.mutation.ResetPayValue()
	vuo.mutation.SetPayValue(u)
	return vuo
}

// AddPayValue adds u to the "pay_value" field.
func (vuo *VoucherUpdateOne) AddPayValue(u int64) *VoucherUpdateOne {
	vuo.mutation.AddPayValue(u)
	return vuo
}

// SetActualValue sets the "actual_value" field.
func (vuo *VoucherUpdateOne) SetActualValue(i int64) *VoucherUpdateOne {
	vuo.mutation.ResetActualValue()
	vuo.mutation.SetActualValue(i)
	return vuo
}

// AddActualValue adds i to the "actual_value" field.
func (vuo *VoucherUpdateOne) AddActualValue(i int64) *VoucherUpdateOne {
	vuo.mutation.AddActualValue(i)
	return vuo
}

// SetType sets the "type" field.
func (vuo *VoucherUpdateOne) SetType(i int8) *VoucherUpdateOne {
	vuo.mutation.ResetType()
	vuo.mutation.SetType(i)
	return vuo
}

// AddType adds i to the "type" field.
func (vuo *VoucherUpdateOne) AddType(i int8) *VoucherUpdateOne {
	vuo.mutation.AddType(i)
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VoucherUpdateOne) SetStatus(i int8) *VoucherUpdateOne {
	vuo.mutation.ResetStatus()
	vuo.mutation.SetStatus(i)
	return vuo
}

// AddStatus adds i to the "status" field.
func (vuo *VoucherUpdateOne) AddStatus(i int8) *VoucherUpdateOne {
	vuo.mutation.AddStatus(i)
	return vuo
}

// SetCreateTime sets the "create_time" field.
func (vuo *VoucherUpdateOne) SetCreateTime(t time.Time) *VoucherUpdateOne {
	vuo.mutation.SetCreateTime(t)
	return vuo
}

// SetUpdateTime sets the "update_time" field.
func (vuo *VoucherUpdateOne) SetUpdateTime(t time.Time) *VoucherUpdateOne {
	vuo.mutation.SetUpdateTime(t)
	return vuo
}

// AddGetMoreIDs adds the "getMore" edge to the SeckillVoucher entity by IDs.
func (vuo *VoucherUpdateOne) AddGetMoreIDs(ids ...uint64) *VoucherUpdateOne {
	vuo.mutation.AddGetMoreIDs(ids...)
	return vuo
}

// AddGetMore adds the "getMore" edges to the SeckillVoucher entity.
func (vuo *VoucherUpdateOne) AddGetMore(s ...*SeckillVoucher) *VoucherUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.AddGetMoreIDs(ids...)
}

// Mutation returns the VoucherMutation object of the builder.
func (vuo *VoucherUpdateOne) Mutation() *VoucherMutation {
	return vuo.mutation
}

// ClearGetMore clears all "getMore" edges to the SeckillVoucher entity.
func (vuo *VoucherUpdateOne) ClearGetMore() *VoucherUpdateOne {
	vuo.mutation.ClearGetMore()
	return vuo
}

// RemoveGetMoreIDs removes the "getMore" edge to SeckillVoucher entities by IDs.
func (vuo *VoucherUpdateOne) RemoveGetMoreIDs(ids ...uint64) *VoucherUpdateOne {
	vuo.mutation.RemoveGetMoreIDs(ids...)
	return vuo
}

// RemoveGetMore removes "getMore" edges to SeckillVoucher entities.
func (vuo *VoucherUpdateOne) RemoveGetMore(s ...*SeckillVoucher) *VoucherUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.RemoveGetMoreIDs(ids...)
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vuo *VoucherUpdateOne) Where(ps ...predicate.Voucher) *VoucherUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoucherUpdateOne) Select(field string, fields ...string) *VoucherUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Voucher entity.
func (vuo *VoucherUpdateOne) Save(ctx context.Context) (*Voucher, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoucherUpdateOne) SaveX(ctx context.Context) *Voucher {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoucherUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VoucherUpdateOne) sqlSave(ctx context.Context) (_node *Voucher, err error) {
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Voucher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voucher.FieldID)
		for _, f := range fields {
			if !voucher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.ShopID(); ok {
		_spec.SetField(voucher.FieldShopID, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.AddedShopID(); ok {
		_spec.AddField(voucher.FieldShopID, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(voucher.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.SubTitle(); ok {
		_spec.SetField(voucher.FieldSubTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Rules(); ok {
		_spec.SetField(voucher.FieldRules, field.TypeString, value)
	}
	if value, ok := vuo.mutation.PayValue(); ok {
		_spec.SetField(voucher.FieldPayValue, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.AddedPayValue(); ok {
		_spec.AddField(voucher.FieldPayValue, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.ActualValue(); ok {
		_spec.SetField(voucher.FieldActualValue, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedActualValue(); ok {
		_spec.AddField(voucher.FieldActualValue, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(voucher.FieldType, field.TypeInt8, value)
	}
	if value, ok := vuo.mutation.AddedType(); ok {
		_spec.AddField(voucher.FieldType, field.TypeInt8, value)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(voucher.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vuo.mutation.AddedStatus(); ok {
		_spec.AddField(voucher.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vuo.mutation.CreateTime(); ok {
		_spec.SetField(voucher.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdateTime(); ok {
		_spec.SetField(voucher.FieldUpdateTime, field.TypeTime, value)
	}
	if vuo.mutation.GetMoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedGetMoreIDs(); len(nodes) > 0 && !vuo.mutation.GetMoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.GetMoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.GetMoreTable,
			Columns: []string{voucher.GetMoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Voucher{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
