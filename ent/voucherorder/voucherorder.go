// Code generated by ent, DO NOT EDIT.

package voucherorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the voucherorder type in the database.
	Label = "voucher_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldVoucherID holds the string denoting the voucher_id field in the database.
	FieldVoucherID = "voucher_id"
	// FieldPayType holds the string denoting the pay_type field in the database.
	FieldPayType = "pay_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayTime holds the string denoting the pay_time field in the database.
	FieldPayTime = "pay_time"
	// FieldUseTime holds the string denoting the use_time field in the database.
	FieldUseTime = "use_time"
	// FieldRefundTime holds the string denoting the refund_time field in the database.
	FieldRefundTime = "refund_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the voucherorder in the database.
	Table = "tb_voucher_order"
)

// Columns holds all SQL columns for voucherorder fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldVoucherID,
	FieldPayType,
	FieldStatus,
	FieldPayTime,
	FieldUseTime,
	FieldRefundTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime time.Time
)

// OrderOption defines the ordering options for the VoucherOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByVoucherID orders the results by the voucher_id field.
func ByVoucherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoucherID, opts...).ToFunc()
}

// ByPayType orders the results by the pay_type field.
func ByPayType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPayTime orders the results by the pay_time field.
func ByPayTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayTime, opts...).ToFunc()
}

// ByUseTime orders the results by the use_time field.
func ByUseTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseTime, opts...).ToFunc()
}

// ByRefundTime orders the results by the refund_time field.
func ByRefundTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
