// Code generated by ent, DO NOT EDIT.

package seckillvoucher

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seckillvoucher type in the database.
	Label = "seckill_voucher"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVoucherID holds the string denoting the voucher_id field in the database.
	FieldVoucherID = "voucher_id"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldBeginTime holds the string denoting the begin_time field in the database.
	FieldBeginTime = "begin_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeGetForm holds the string denoting the getform edge name in mutations.
	EdgeGetForm = "getForm"
	// Table holds the table name of the seckillvoucher in the database.
	Table = "tb_seckill_voucher"
	// GetFormTable is the table that holds the getForm relation/edge.
	GetFormTable = "tb_seckill_voucher"
	// GetFormInverseTable is the table name for the Voucher entity.
	// It exists in this package in order to avoid circular dependency with the "voucher" package.
	GetFormInverseTable = "tb_voucher"
	// GetFormColumn is the table column denoting the getForm relation/edge.
	GetFormColumn = "voucher_id"
)

// Columns holds all SQL columns for seckillvoucher fields.
var Columns = []string{
	FieldID,
	FieldVoucherID,
	FieldStock,
	FieldBeginTime,
	FieldEndTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SeckillVoucher queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVoucherID orders the results by the voucher_id field.
func ByVoucherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoucherID, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByBeginTime orders the results by the begin_time field.
func ByBeginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByGetFormField orders the results by getForm field.
func ByGetFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGetFormStep(), sql.OrderByField(field, opts...))
	}
}
func newGetFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GetFormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GetFormTable, GetFormColumn),
	)
}
