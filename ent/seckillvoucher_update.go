// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hmdp/ent/predicate"
	"hmdp/ent/seckillvoucher"
	"hmdp/ent/voucher"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeckillVoucherUpdate is the builder for updating SeckillVoucher entities.
type SeckillVoucherUpdate struct {
	config
	hooks    []Hook
	mutation *SeckillVoucherMutation
}

// Where appends a list predicates to the SeckillVoucherUpdate builder.
func (svu *SeckillVoucherUpdate) Where(ps ...predicate.SeckillVoucher) *SeckillVoucherUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetVoucherID sets the "voucher_id" field.
func (svu *SeckillVoucherUpdate) SetVoucherID(u uint64) *SeckillVoucherUpdate {
	svu.mutation.SetVoucherID(u)
	return svu
}

// SetStock sets the "stock" field.
func (svu *SeckillVoucherUpdate) SetStock(u uint64) *SeckillVoucherUpdate {
	svu.mutation.ResetStock()
	svu.mutation.SetStock(u)
	return svu
}

// AddStock adds u to the "stock" field.
func (svu *SeckillVoucherUpdate) AddStock(u int64) *SeckillVoucherUpdate {
	svu.mutation.AddStock(u)
	return svu
}

// SetBeginTime sets the "begin_time" field.
func (svu *SeckillVoucherUpdate) SetBeginTime(t time.Time) *SeckillVoucherUpdate {
	svu.mutation.SetBeginTime(t)
	return svu
}

// SetEndTime sets the "end_time" field.
func (svu *SeckillVoucherUpdate) SetEndTime(t time.Time) *SeckillVoucherUpdate {
	svu.mutation.SetEndTime(t)
	return svu
}

// SetCreateTime sets the "create_time" field.
func (svu *SeckillVoucherUpdate) SetCreateTime(t time.Time) *SeckillVoucherUpdate {
	svu.mutation.SetCreateTime(t)
	return svu
}

// SetUpdateTime sets the "update_time" field.
func (svu *SeckillVoucherUpdate) SetUpdateTime(t time.Time) *SeckillVoucherUpdate {
	svu.mutation.SetUpdateTime(t)
	return svu
}

// SetGetFormID sets the "getForm" edge to the Voucher entity by ID.
func (svu *SeckillVoucherUpdate) SetGetFormID(id uint64) *SeckillVoucherUpdate {
	svu.mutation.SetGetFormID(id)
	return svu
}

// SetGetForm sets the "getForm" edge to the Voucher entity.
func (svu *SeckillVoucherUpdate) SetGetForm(v *Voucher) *SeckillVoucherUpdate {
	return svu.SetGetFormID(v.ID)
}

// Mutation returns the SeckillVoucherMutation object of the builder.
func (svu *SeckillVoucherUpdate) Mutation() *SeckillVoucherMutation {
	return svu.mutation
}

// ClearGetForm clears the "getForm" edge to the Voucher entity.
func (svu *SeckillVoucherUpdate) ClearGetForm() *SeckillVoucherUpdate {
	svu.mutation.ClearGetForm()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SeckillVoucherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SeckillVoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SeckillVoucherUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SeckillVoucherUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SeckillVoucherUpdate) check() error {
	if _, ok := svu.mutation.GetFormID(); svu.mutation.GetFormCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeckillVoucher.getForm"`)
	}
	return nil
}

func (svu *SeckillVoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seckillvoucher.Table, seckillvoucher.Columns, sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Stock(); ok {
		_spec.SetField(seckillvoucher.FieldStock, field.TypeUint64, value)
	}
	if value, ok := svu.mutation.AddedStock(); ok {
		_spec.AddField(seckillvoucher.FieldStock, field.TypeUint64, value)
	}
	if value, ok := svu.mutation.BeginTime(); ok {
		_spec.SetField(seckillvoucher.FieldBeginTime, field.TypeTime, value)
	}
	if value, ok := svu.mutation.EndTime(); ok {
		_spec.SetField(seckillvoucher.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := svu.mutation.CreateTime(); ok {
		_spec.SetField(seckillvoucher.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := svu.mutation.UpdateTime(); ok {
		_spec.SetField(seckillvoucher.FieldUpdateTime, field.TypeTime, value)
	}
	if svu.mutation.GetFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seckillvoucher.GetFormTable,
			Columns: []string{seckillvoucher.GetFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.GetFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seckillvoucher.GetFormTable,
			Columns: []string{seckillvoucher.GetFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillvoucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SeckillVoucherUpdateOne is the builder for updating a single SeckillVoucher entity.
type SeckillVoucherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeckillVoucherMutation
}

// SetVoucherID sets the "voucher_id" field.
func (svuo *SeckillVoucherUpdateOne) SetVoucherID(u uint64) *SeckillVoucherUpdateOne {
	svuo.mutation.SetVoucherID(u)
	return svuo
}

// SetStock sets the "stock" field.
func (svuo *SeckillVoucherUpdateOne) SetStock(u uint64) *SeckillVoucherUpdateOne {
	svuo.mutation.ResetStock()
	svuo.mutation.SetStock(u)
	return svuo
}

// AddStock adds u to the "stock" field.
func (svuo *SeckillVoucherUpdateOne) AddStock(u int64) *SeckillVoucherUpdateOne {
	svuo.mutation.AddStock(u)
	return svuo
}

// SetBeginTime sets the "begin_time" field.
func (svuo *SeckillVoucherUpdateOne) SetBeginTime(t time.Time) *SeckillVoucherUpdateOne {
	svuo.mutation.SetBeginTime(t)
	return svuo
}

// SetEndTime sets the "end_time" field.
func (svuo *SeckillVoucherUpdateOne) SetEndTime(t time.Time) *SeckillVoucherUpdateOne {
	svuo.mutation.SetEndTime(t)
	return svuo
}

// SetCreateTime sets the "create_time" field.
func (svuo *SeckillVoucherUpdateOne) SetCreateTime(t time.Time) *SeckillVoucherUpdateOne {
	svuo.mutation.SetCreateTime(t)
	return svuo
}

// SetUpdateTime sets the "update_time" field.
func (svuo *SeckillVoucherUpdateOne) SetUpdateTime(t time.Time) *SeckillVoucherUpdateOne {
	svuo.mutation.SetUpdateTime(t)
	return svuo
}

// SetGetFormID sets the "getForm" edge to the Voucher entity by ID.
func (svuo *SeckillVoucherUpdateOne) SetGetFormID(id uint64) *SeckillVoucherUpdateOne {
	svuo.mutation.SetGetFormID(id)
	return svuo
}

// SetGetForm sets the "getForm" edge to the Voucher entity.
func (svuo *SeckillVoucherUpdateOne) SetGetForm(v *Voucher) *SeckillVoucherUpdateOne {
	return svuo.SetGetFormID(v.ID)
}

// Mutation returns the SeckillVoucherMutation object of the builder.
func (svuo *SeckillVoucherUpdateOne) Mutation() *SeckillVoucherMutation {
	return svuo.mutation
}

// ClearGetForm clears the "getForm" edge to the Voucher entity.
func (svuo *SeckillVoucherUpdateOne) ClearGetForm() *SeckillVoucherUpdateOne {
	svuo.mutation.ClearGetForm()
	return svuo
}

// Where appends a list predicates to the SeckillVoucherUpdate builder.
func (svuo *SeckillVoucherUpdateOne) Where(ps ...predicate.SeckillVoucher) *SeckillVoucherUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SeckillVoucherUpdateOne) Select(field string, fields ...string) *SeckillVoucherUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SeckillVoucher entity.
func (svuo *SeckillVoucherUpdateOne) Save(ctx context.Context) (*SeckillVoucher, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SeckillVoucherUpdateOne) SaveX(ctx context.Context) *SeckillVoucher {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SeckillVoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SeckillVoucherUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SeckillVoucherUpdateOne) check() error {
	if _, ok := svuo.mutation.GetFormID(); svuo.mutation.GetFormCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SeckillVoucher.getForm"`)
	}
	return nil
}

func (svuo *SeckillVoucherUpdateOne) sqlSave(ctx context.Context) (_node *SeckillVoucher, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seckillvoucher.Table, seckillvoucher.Columns, sqlgraph.NewFieldSpec(seckillvoucher.FieldID, field.TypeUint64))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeckillVoucher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seckillvoucher.FieldID)
		for _, f := range fields {
			if !seckillvoucher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seckillvoucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Stock(); ok {
		_spec.SetField(seckillvoucher.FieldStock, field.TypeUint64, value)
	}
	if value, ok := svuo.mutation.AddedStock(); ok {
		_spec.AddField(seckillvoucher.FieldStock, field.TypeUint64, value)
	}
	if value, ok := svuo.mutation.BeginTime(); ok {
		_spec.SetField(seckillvoucher.FieldBeginTime, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.EndTime(); ok {
		_spec.SetField(seckillvoucher.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.CreateTime(); ok {
		_spec.SetField(seckillvoucher.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.UpdateTime(); ok {
		_spec.SetField(seckillvoucher.FieldUpdateTime, field.TypeTime, value)
	}
	if svuo.mutation.GetFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seckillvoucher.GetFormTable,
			Columns: []string{seckillvoucher.GetFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.GetFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seckillvoucher.GetFormTable,
			Columns: []string{seckillvoucher.GetFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SeckillVoucher{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seckillvoucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
