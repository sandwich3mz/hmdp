// Code generated by ent, DO NOT EDIT.

package voucher

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the voucher type in the database.
	Label = "voucher"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShopID holds the string denoting the shop_id field in the database.
	FieldShopID = "shop_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubTitle holds the string denoting the sub_title field in the database.
	FieldSubTitle = "sub_title"
	// FieldRules holds the string denoting the rules field in the database.
	FieldRules = "rules"
	// FieldPayValue holds the string denoting the pay_value field in the database.
	FieldPayValue = "pay_value"
	// FieldActualValue holds the string denoting the actual_value field in the database.
	FieldActualValue = "actual_value"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeGetMore holds the string denoting the getmore edge name in mutations.
	EdgeGetMore = "getMore"
	// Table holds the table name of the voucher in the database.
	Table = "tb_voucher"
	// GetMoreTable is the table that holds the getMore relation/edge.
	GetMoreTable = "tb_seckill_voucher"
	// GetMoreInverseTable is the table name for the SeckillVoucher entity.
	// It exists in this package in order to avoid circular dependency with the "seckillvoucher" package.
	GetMoreInverseTable = "tb_seckill_voucher"
	// GetMoreColumn is the table column denoting the getMore relation/edge.
	GetMoreColumn = "voucher_id"
)

// Columns holds all SQL columns for voucher fields.
var Columns = []string{
	FieldID,
	FieldShopID,
	FieldTitle,
	FieldSubTitle,
	FieldRules,
	FieldPayValue,
	FieldActualValue,
	FieldType,
	FieldStatus,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Voucher queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShopID orders the results by the shop_id field.
func ByShopID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShopID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubTitle orders the results by the sub_title field.
func BySubTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubTitle, opts...).ToFunc()
}

// ByRules orders the results by the rules field.
func ByRules(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRules, opts...).ToFunc()
}

// ByPayValue orders the results by the pay_value field.
func ByPayValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayValue, opts...).ToFunc()
}

// ByActualValue orders the results by the actual_value field.
func ByActualValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActualValue, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByGetMoreCount orders the results by getMore count.
func ByGetMoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGetMoreStep(), opts...)
	}
}

// ByGetMore orders the results by getMore terms.
func ByGetMore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGetMoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGetMoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GetMoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GetMoreTable, GetMoreColumn),
	)
}
