// Code generated by ent, DO NOT EDIT.

package voucher

import (
	"hmdp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldID, id))
}

// ShopID applies equality check predicate on the "shop_id" field. It's identical to ShopIDEQ.
func ShopID(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldShopID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldTitle, v))
}

// SubTitle applies equality check predicate on the "sub_title" field. It's identical to SubTitleEQ.
func SubTitle(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldSubTitle, v))
}

// Rules applies equality check predicate on the "rules" field. It's identical to RulesEQ.
func Rules(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldRules, v))
}

// PayValue applies equality check predicate on the "pay_value" field. It's identical to PayValueEQ.
func PayValue(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldPayValue, v))
}

// ActualValue applies equality check predicate on the "actual_value" field. It's identical to ActualValueEQ.
func ActualValue(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldActualValue, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldStatus, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldUpdateTime, v))
}

// ShopIDEQ applies the EQ predicate on the "shop_id" field.
func ShopIDEQ(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldShopID, v))
}

// ShopIDNEQ applies the NEQ predicate on the "shop_id" field.
func ShopIDNEQ(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldShopID, v))
}

// ShopIDIn applies the In predicate on the "shop_id" field.
func ShopIDIn(vs ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldShopID, vs...))
}

// ShopIDNotIn applies the NotIn predicate on the "shop_id" field.
func ShopIDNotIn(vs ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldShopID, vs...))
}

// ShopIDGT applies the GT predicate on the "shop_id" field.
func ShopIDGT(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldShopID, v))
}

// ShopIDGTE applies the GTE predicate on the "shop_id" field.
func ShopIDGTE(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldShopID, v))
}

// ShopIDLT applies the LT predicate on the "shop_id" field.
func ShopIDLT(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldShopID, v))
}

// ShopIDLTE applies the LTE predicate on the "shop_id" field.
func ShopIDLTE(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldShopID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContainsFold(FieldTitle, v))
}

// SubTitleEQ applies the EQ predicate on the "sub_title" field.
func SubTitleEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldSubTitle, v))
}

// SubTitleNEQ applies the NEQ predicate on the "sub_title" field.
func SubTitleNEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldSubTitle, v))
}

// SubTitleIn applies the In predicate on the "sub_title" field.
func SubTitleIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldSubTitle, vs...))
}

// SubTitleNotIn applies the NotIn predicate on the "sub_title" field.
func SubTitleNotIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldSubTitle, vs...))
}

// SubTitleGT applies the GT predicate on the "sub_title" field.
func SubTitleGT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldSubTitle, v))
}

// SubTitleGTE applies the GTE predicate on the "sub_title" field.
func SubTitleGTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldSubTitle, v))
}

// SubTitleLT applies the LT predicate on the "sub_title" field.
func SubTitleLT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldSubTitle, v))
}

// SubTitleLTE applies the LTE predicate on the "sub_title" field.
func SubTitleLTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldSubTitle, v))
}

// SubTitleContains applies the Contains predicate on the "sub_title" field.
func SubTitleContains(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContains(FieldSubTitle, v))
}

// SubTitleHasPrefix applies the HasPrefix predicate on the "sub_title" field.
func SubTitleHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasPrefix(FieldSubTitle, v))
}

// SubTitleHasSuffix applies the HasSuffix predicate on the "sub_title" field.
func SubTitleHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasSuffix(FieldSubTitle, v))
}

// SubTitleEqualFold applies the EqualFold predicate on the "sub_title" field.
func SubTitleEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEqualFold(FieldSubTitle, v))
}

// SubTitleContainsFold applies the ContainsFold predicate on the "sub_title" field.
func SubTitleContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContainsFold(FieldSubTitle, v))
}

// RulesEQ applies the EQ predicate on the "rules" field.
func RulesEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldRules, v))
}

// RulesNEQ applies the NEQ predicate on the "rules" field.
func RulesNEQ(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldRules, v))
}

// RulesIn applies the In predicate on the "rules" field.
func RulesIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldRules, vs...))
}

// RulesNotIn applies the NotIn predicate on the "rules" field.
func RulesNotIn(vs ...string) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldRules, vs...))
}

// RulesGT applies the GT predicate on the "rules" field.
func RulesGT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldRules, v))
}

// RulesGTE applies the GTE predicate on the "rules" field.
func RulesGTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldRules, v))
}

// RulesLT applies the LT predicate on the "rules" field.
func RulesLT(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldRules, v))
}

// RulesLTE applies the LTE predicate on the "rules" field.
func RulesLTE(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldRules, v))
}

// RulesContains applies the Contains predicate on the "rules" field.
func RulesContains(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContains(FieldRules, v))
}

// RulesHasPrefix applies the HasPrefix predicate on the "rules" field.
func RulesHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasPrefix(FieldRules, v))
}

// RulesHasSuffix applies the HasSuffix predicate on the "rules" field.
func RulesHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldHasSuffix(FieldRules, v))
}

// RulesEqualFold applies the EqualFold predicate on the "rules" field.
func RulesEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldEqualFold(FieldRules, v))
}

// RulesContainsFold applies the ContainsFold predicate on the "rules" field.
func RulesContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(sql.FieldContainsFold(FieldRules, v))
}

// PayValueEQ applies the EQ predicate on the "pay_value" field.
func PayValueEQ(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldPayValue, v))
}

// PayValueNEQ applies the NEQ predicate on the "pay_value" field.
func PayValueNEQ(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldPayValue, v))
}

// PayValueIn applies the In predicate on the "pay_value" field.
func PayValueIn(vs ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldPayValue, vs...))
}

// PayValueNotIn applies the NotIn predicate on the "pay_value" field.
func PayValueNotIn(vs ...uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldPayValue, vs...))
}

// PayValueGT applies the GT predicate on the "pay_value" field.
func PayValueGT(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldPayValue, v))
}

// PayValueGTE applies the GTE predicate on the "pay_value" field.
func PayValueGTE(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldPayValue, v))
}

// PayValueLT applies the LT predicate on the "pay_value" field.
func PayValueLT(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldPayValue, v))
}

// PayValueLTE applies the LTE predicate on the "pay_value" field.
func PayValueLTE(v uint64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldPayValue, v))
}

// ActualValueEQ applies the EQ predicate on the "actual_value" field.
func ActualValueEQ(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldActualValue, v))
}

// ActualValueNEQ applies the NEQ predicate on the "actual_value" field.
func ActualValueNEQ(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldActualValue, v))
}

// ActualValueIn applies the In predicate on the "actual_value" field.
func ActualValueIn(vs ...int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldActualValue, vs...))
}

// ActualValueNotIn applies the NotIn predicate on the "actual_value" field.
func ActualValueNotIn(vs ...int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldActualValue, vs...))
}

// ActualValueGT applies the GT predicate on the "actual_value" field.
func ActualValueGT(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldActualValue, v))
}

// ActualValueGTE applies the GTE predicate on the "actual_value" field.
func ActualValueGTE(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldActualValue, v))
}

// ActualValueLT applies the LT predicate on the "actual_value" field.
func ActualValueLT(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldActualValue, v))
}

// ActualValueLTE applies the LTE predicate on the "actual_value" field.
func ActualValueLTE(v int64) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldActualValue, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(sql.FieldLTE(FieldUpdateTime, v))
}

// HasGetMore applies the HasEdge predicate on the "getMore" edge.
func HasGetMore() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GetMoreTable, GetMoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGetMoreWith applies the HasEdge predicate on the "getMore" edge with a given conditions (other predicates).
func HasGetMoreWith(preds ...predicate.SeckillVoucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		step := newGetMoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		p(s.Not())
	})
}
