// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hmdp/ent/seckillvoucher"
	"hmdp/ent/voucher"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SeckillVoucher is the model entity for the SeckillVoucher schema.
type SeckillVoucher struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID uint64 `json:"id,omitempty"`
	// 优惠券id
	VoucherID uint64 `json:"voucher_id,omitempty"`
	// 库存
	Stock uint64 `json:"stock,omitempty"`
	// 生效时间
	BeginTime time.Time `json:"beginTime,omitempty"`
	// 失效时间
	EndTime time.Time `json:"endTime,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeckillVoucherQuery when eager-loading is set.
	Edges        SeckillVoucherEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeckillVoucherEdges holds the relations/edges for other nodes in the graph.
type SeckillVoucherEdges struct {
	// GetForm holds the value of the getForm edge.
	GetForm *Voucher `json:"getForm,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GetFormOrErr returns the GetForm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeckillVoucherEdges) GetFormOrErr() (*Voucher, error) {
	if e.loadedTypes[0] {
		if e.GetForm == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: voucher.Label}
		}
		return e.GetForm, nil
	}
	return nil, &NotLoadedError{edge: "getForm"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeckillVoucher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seckillvoucher.FieldID, seckillvoucher.FieldVoucherID, seckillvoucher.FieldStock:
			values[i] = new(sql.NullInt64)
		case seckillvoucher.FieldBeginTime, seckillvoucher.FieldEndTime, seckillvoucher.FieldCreateTime, seckillvoucher.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeckillVoucher fields.
func (sv *SeckillVoucher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seckillvoucher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = uint64(value.Int64)
		case seckillvoucher.FieldVoucherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field voucher_id", values[i])
			} else if value.Valid {
				sv.VoucherID = uint64(value.Int64)
			}
		case seckillvoucher.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				sv.Stock = uint64(value.Int64)
			}
		case seckillvoucher.FieldBeginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_time", values[i])
			} else if value.Valid {
				sv.BeginTime = value.Time
			}
		case seckillvoucher.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				sv.EndTime = value.Time
			}
		case seckillvoucher.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sv.CreateTime = value.Time
			}
		case seckillvoucher.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sv.UpdateTime = value.Time
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeckillVoucher.
// This includes values selected through modifiers, order, etc.
func (sv *SeckillVoucher) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// QueryGetForm queries the "getForm" edge of the SeckillVoucher entity.
func (sv *SeckillVoucher) QueryGetForm() *VoucherQuery {
	return NewSeckillVoucherClient(sv.config).QueryGetForm(sv)
}

// Update returns a builder for updating this SeckillVoucher.
// Note that you need to call SeckillVoucher.Unwrap() before calling this method if this SeckillVoucher
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SeckillVoucher) Update() *SeckillVoucherUpdateOne {
	return NewSeckillVoucherClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SeckillVoucher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SeckillVoucher) Unwrap() *SeckillVoucher {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeckillVoucher is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SeckillVoucher) String() string {
	var builder strings.Builder
	builder.WriteString("SeckillVoucher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("voucher_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.VoucherID))
	builder.WriteString(", ")
	builder.WriteString("stock=")
	builder.WriteString(fmt.Sprintf("%v", sv.Stock))
	builder.WriteString(", ")
	builder.WriteString("begin_time=")
	builder.WriteString(sv.BeginTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(sv.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sv.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SeckillVouchers is a parsable slice of SeckillVoucher.
type SeckillVouchers []*SeckillVoucher
